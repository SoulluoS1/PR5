from threading import Thread, Event
import time
import itertools
from string import ascii_letters
from queue import Queue
from pynput import keyboard

MIN_LEN = 3
MAX_LEN = 26
QUANTUM = 450000  # nanosecond
TICK = QUANTUM * 15
WORDS = ("AzFO", "AAaA", "oooN")

ready_queue = Queue(maxsize=3)
wait_queue = Queue(maxsize=3)

#описание потока
class BruteThread(Thread):
    def _init_(self, name, word):
        Thread._init_(self)
        self.name = name
        self.word = word
        self.__is_ready = False
        self.__count = 0
        self.__pause_event = Event()

    def _simple_brute(self):
        for repeat in range(MIN_LEN, MAX_LEN):
            for i in itertools.product(ascii_letters, repeat=repeat):
                self.__count += 1
                #print(''.join(i))
                self.__pause_event.wait()
                if ''.join(i) == self.word:
                    return True
        return None

#запуск и выполнение потока
    def run(self):
        self.__is_ready = True
        if self.__is_ready:
            print(f"Поток '{self.name}' запущен!")
        if self._simple_brute() is not None:
            print(f"Поток '{self.name}' успешно завершен! Слово: {self.word} Итераций: {self.__count}")
        else:
            print(f"Поток '{self.name}' завершился неудачно! Слово: {self.word} Итераций: {self.__count}")
        self.__is_ready = False

#приостановить поток
    def pause(self):
        if self.__pause_event.is_set():
            self.__pause_event.clear()

#возобновить поток
    def resume(self):
        if not self.__pause_event.is_set():
            self.__pause_event.set()

#проверяет выполняется ли поток
    def is_ready(self):
        return self.__is_ready

#проверяет остановлен ли поток
    def unready(self):
        self._is_ready = not self._is_ready

#планировщик
class Helper:
    def _init_(self):
        self.__active_thread = None

    def set_active_thread(self, thread):
        self.__active_thread = thread

    def get_active_thread(self):
        return self.__active_thread

    def wait_timer_or_event(self):
        start = time.time_ns()
        while self.__active_thread.is_ready():
            if time.time_ns() - start >= TICK:
                ready_queue.put(self.__active_thread)
 перерыв
 Возврат


threads = [BruteThread("First()", WORDS[0]), BruteThread("Second()", WORDS[1]), BruteThread("Third()", WORDS[2])]

Планировщик = Помощник()

#отработка горячей клавиши K (перевод одного потока в режим ожидания)
def on_hotkeyL():
 если wait_queue.qsize() >= 1:
 active_thread = wait_queue.get()
 active_thread.unready()
 ready_queue.put(active_thread)
 print("Хоткей активирован, отправлен на готовность ", active_thread.name)
#отработка горячей клавиши K (перевод одного потока в активный режим)
def on_hotkeyK():
 если Planner.get_active_thread() не является None:
 active_thread = Planner.get_active_thread()
 active_thread.pause()
 active_thread.unready()
 wait_queue.put(active_thread)
 print("Хоткей активирован, ожидает ", active_thread)


слушатель = клавиатура.GlobalHotKeys({
 'k': on_hotkeyK,
 'l': on_hotkeyL})

listener.start()

# Порождение
[item.start() для элемента в потоках]

# Заполнение очереди готовыми потоками
для резьбы в резьбе:
 if thread.is_ready():
 ready_queue.put(поток)

# Основная логика программы
пока ready_queue.qsize() или wait_queue.qsize():
 active_thread = ready_queue.get()
 active_thread.resume()
 Planner.set_active_thread(active_thread)
 Planner.wait_timer_or_event()
 active_thread.pause()
 Planner.set_active_thread(Нет)
listener.stop()
для резьбы в резьбе:
 thread.join()
